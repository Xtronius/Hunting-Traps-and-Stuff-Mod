package mod.xtronius.htsm.tileEntity.renderer.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelCage extends ModelBase {
  //fields
    public ModelRenderer CageBot;
    public ModelRenderer CageTop;
    public ModelRenderer CagePostFrontLeft;
    public ModelRenderer CagePostFrontRight;
    public ModelRenderer CagePostBackLeft;
    public ModelRenderer CagePostBackRight;
    public ModelRenderer GateFrontBot;
    public ModelRenderer GateFrontTop;
    public ModelRenderer GateFrontPost1;
    public ModelRenderer GateFrontPost2;
    public ModelRenderer GateFrontPost3;
    public ModelRenderer GateFrontPost4;
    public ModelRenderer GateBackBot;
    public ModelRenderer GateBackTop;
    public ModelRenderer GateBackPost1;
    public ModelRenderer GateBackPost2;
    public ModelRenderer GateBackPost3;
    public ModelRenderer GateBackPost4;
    public ModelRenderer GateLeftBot;
    public ModelRenderer GateLeftTop;
    public ModelRenderer GateLeftPost1;
    public ModelRenderer GateLeftPost2;
    public ModelRenderer GateLeftPost3;
    public ModelRenderer GateLeftPost4;
    public ModelRenderer GateRightBot;
    public ModelRenderer GateRightTop;
    public ModelRenderer GateRightPost1;
    public ModelRenderer GateRightPost2;
    public ModelRenderer GateRightPost3;
    public ModelRenderer GateRightPost4;
  
  public ModelCage() {
    textureWidth = 512;
    textureHeight = 512;
    
      CageBot = new ModelRenderer(this, 0, 0);
      CageBot.addBox(0F, 0F, 0F, 16, 1, 16);
      CageBot.setRotationPoint(-8F, 23F, -8F);
      CageBot.setTextureSize(64, 32);
      CageBot.mirror = true;
      setRotation(CageBot, 0F, 0F, 0F);
      CageTop = new ModelRenderer(this, 0, 0);
      CageTop.addBox(0F, 0F, 0F, 16, 1, 16);
      CageTop.setRotationPoint(-8F, 8F, -8F);
      CageTop.setTextureSize(64, 32);
      CageTop.mirror = true;
      setRotation(CageTop, 0F, 0F, 0F);
      CagePostFrontLeft = new ModelRenderer(this, 80, 0);
      CagePostFrontLeft.addBox(0F, 0F, 0F, 1, 14, 1);
      CagePostFrontLeft.setRotationPoint(-8F, 9F, -8F);
      CagePostFrontLeft.setTextureSize(64, 32);
      CagePostFrontLeft.mirror = true;
      setRotation(CagePostFrontLeft, 0F, 0F, 0F);
      CagePostFrontRight = new ModelRenderer(this, 80, 0);
      CagePostFrontRight.addBox(0F, 0F, 0F, 1, 14, 1);
      CagePostFrontRight.setRotationPoint(7F, 9F, -8F);
      CagePostFrontRight.setTextureSize(64, 32);
      CagePostFrontRight.mirror = true;
      setRotation(CagePostFrontRight, 0F, 0F, 0F);
      CagePostBackLeft = new ModelRenderer(this, 80, 0);
      CagePostBackLeft.addBox(0F, 0F, 0F, 1, 14, 1);
      CagePostBackLeft.setRotationPoint(-8F, 9F, 7F);
      CagePostBackLeft.setTextureSize(64, 32);
      CagePostBackLeft.mirror = true;
      setRotation(CagePostBackLeft, 0F, 0F, 0F);
      CagePostBackRight = new ModelRenderer(this, 80, 0);
      CagePostBackRight.addBox(0F, 0F, 0F, 1, 14, 1);
      CagePostBackRight.setRotationPoint(7F, 9F, 7F);
      CagePostBackRight.setTextureSize(64, 32);
      CagePostBackRight.mirror = true;
      setRotation(CagePostBackRight, 0F, 0F, 0F);
      GateFrontBot = new ModelRenderer(this, 96, 0);
      GateFrontBot.addBox(0F, 0F, 0F, 14, 1, 1);
      GateFrontBot.setRotationPoint(-7F, 22F, -8F);
      GateFrontBot.setTextureSize(64, 32);
      GateFrontBot.mirror = true;
      setRotation(GateFrontBot, 0F, 0F, 0F);
      GateFrontTop = new ModelRenderer(this, 96, 0);
      GateFrontTop.addBox(0F, 0F, 0F, 14, 1, 1);
      GateFrontTop.setRotationPoint(-7F, 9F, -8F);
      GateFrontTop.setTextureSize(64, 32);
      GateFrontTop.mirror = true;
      setRotation(GateFrontTop, 0F, 0F, 0F);
      GateFrontPost1 = new ModelRenderer(this, 176, 0);
      GateFrontPost1.addBox(0F, 0F, 0F, 1, 12, 1);
      GateFrontPost1.setRotationPoint(-5F, 10F, -8F);
      GateFrontPost1.setTextureSize(64, 32);
      GateFrontPost1.mirror = true;
      setRotation(GateFrontPost1, 0F, 0F, 0F);
      GateFrontPost2 = new ModelRenderer(this, 176, 0);
      GateFrontPost2.addBox(0F, 0F, 0F, 1, 12, 1);
      GateFrontPost2.setRotationPoint(-2F, 10F, -8F);
      GateFrontPost2.setTextureSize(64, 32);
      GateFrontPost2.mirror = true;
      setRotation(GateFrontPost2, 0F, 0F, 0F);
      GateFrontPost3 = new ModelRenderer(this, 176, 0);
      GateFrontPost3.addBox(0F, 0F, 0F, 1, 12, 1);
      GateFrontPost3.setRotationPoint(1F, 10F, -8F);
      GateFrontPost3.setTextureSize(64, 32);
      GateFrontPost3.mirror = true;
      setRotation(GateFrontPost3, 0F, 0F, 0F);
      GateFrontPost4 = new ModelRenderer(this, 176, 0);
      GateFrontPost4.addBox(0F, 0F, 0F, 1, 12, 1);
      GateFrontPost4.setRotationPoint(4F, 10F, -8F);
      GateFrontPost4.setTextureSize(64, 32);
      GateFrontPost4.mirror = true;
      setRotation(GateFrontPost4, 0F, 0F, 0F);
      GateBackBot = new ModelRenderer(this, 96, 0);
      GateBackBot.addBox(0F, 0F, 0F, 14, 1, 1);
      GateBackBot.setRotationPoint(-7F, 22F, 7F);
      GateBackBot.setTextureSize(64, 32);
      GateBackBot.mirror = true;
      setRotation(GateBackBot, 0F, 0F, 0F);
      GateBackTop = new ModelRenderer(this, 96, 0);
      GateBackTop.addBox(0F, 0F, 0F, 14, 1, 1);
      GateBackTop.setRotationPoint(-7F, 9F, 7F);
      GateBackTop.setTextureSize(64, 32);
      GateBackTop.mirror = true;
      setRotation(GateBackTop, 0F, 0F, 0F);
      GateBackPost1 = new ModelRenderer(this, 176, 0);
      GateBackPost1.addBox(0F, 0F, 0F, 1, 12, 1);
      GateBackPost1.setRotationPoint(4F, 10F, 7F);
      GateBackPost1.setTextureSize(64, 32);
      GateBackPost1.mirror = true;
      setRotation(GateBackPost1, 0F, 0F, 0F);
      GateBackPost2 = new ModelRenderer(this, 176, 0);
      GateBackPost2.addBox(0F, 0F, 0F, 1, 12, 1);
      GateBackPost2.setRotationPoint(1F, 10F, 7F);
      GateBackPost2.setTextureSize(64, 32);
      GateBackPost2.mirror = true;
      setRotation(GateBackPost2, 0F, 0F, 0F);
      GateBackPost3 = new ModelRenderer(this, 176, 0);
      GateBackPost3.addBox(0F, 0F, 0F, 1, 12, 1);
      GateBackPost3.setRotationPoint(-2F, 10F, 7F);
      GateBackPost3.setTextureSize(64, 32);
      GateBackPost3.mirror = true;
      setRotation(GateBackPost3, 0F, 0F, 0F);
      GateBackPost4 = new ModelRenderer(this, 176, 0);
      GateBackPost4.addBox(0F, 0F, 0F, 1, 12, 1);
      GateBackPost4.setRotationPoint(-5F, 10F, 7F);
      GateBackPost4.setTextureSize(64, 32);
      GateBackPost4.mirror = true;
      setRotation(GateBackPost4, 0F, 0F, 0F);
      GateLeftBot = new ModelRenderer(this, 128, 0);
      GateLeftBot.addBox(0F, 0F, 0F, 1, 1, 14);
      GateLeftBot.setRotationPoint(7F, 22F, -7F);
      GateLeftBot.setTextureSize(64, 32);
      GateLeftBot.mirror = true;
      setRotation(GateLeftBot, 0F, 0F, 0F);
      GateLeftTop = new ModelRenderer(this, 128, 0);
      GateLeftTop.addBox(0F, 0F, 0F, 1, 1, 14);
      GateLeftTop.setRotationPoint(7F, 9F, -7F);
      GateLeftTop.setTextureSize(64, 32);
      GateLeftTop.mirror = true;
      setRotation(GateLeftTop, 0F, 0F, 0F);
      GateLeftPost1 = new ModelRenderer(this, 176, 0);
      GateLeftPost1.addBox(0F, 0F, 0F, 1, 12, 1);
      GateLeftPost1.setRotationPoint(7F, 10F, -5F);
      GateLeftPost1.setTextureSize(64, 32);
      GateLeftPost1.mirror = true;
      setRotation(GateLeftPost1, 0F, 0F, 0F);
      GateLeftPost2 = new ModelRenderer(this, 176, 0);
      GateLeftPost2.addBox(0F, 0F, 0F, 1, 12, 1);
      GateLeftPost2.setRotationPoint(7F, 10F, -2F);
      GateLeftPost2.setTextureSize(64, 32);
      GateLeftPost2.mirror = true;
      setRotation(GateLeftPost2, 0F, 0F, 0F);
      GateLeftPost3 = new ModelRenderer(this, 176, 0);
      GateLeftPost3.addBox(0F, 0F, 0F, 1, 12, 1);
      GateLeftPost3.setRotationPoint(7F, 10F, 1F);
      GateLeftPost3.setTextureSize(64, 32);
      GateLeftPost3.mirror = true;
      setRotation(GateLeftPost3, 0F, 0F, 0F);
      GateLeftPost4 = new ModelRenderer(this, 176, 0);
      GateLeftPost4.addBox(0F, 0F, 0F, 1, 12, 1);
      GateLeftPost4.setRotationPoint(7F, 10F, 4F);
      GateLeftPost4.setTextureSize(64, 32);
      GateLeftPost4.mirror = true;
      setRotation(GateLeftPost4, 0F, 0F, 0F);
      GateRightBot = new ModelRenderer(this, 128, 0);
      GateRightBot.addBox(0F, 0F, 0F, 1, 1, 14);
      GateRightBot.setRotationPoint(-8F, 22F, -7F);
      GateRightBot.setTextureSize(64, 32);
      GateRightBot.mirror = true;
      setRotation(GateRightBot, 0F, 0F, 0F);
      GateRightTop = new ModelRenderer(this, 128, 0);
      GateRightTop.addBox(0F, 0F, 0F, 1, 1, 14);
      GateRightTop.setRotationPoint(-8F, 9F, -7F);
      GateRightTop.setTextureSize(64, 32);
      GateRightTop.mirror = true;
      setRotation(GateRightTop, 0F, 0F, 0F);
      GateRightPost1 = new ModelRenderer(this, 176, 0);
      GateRightPost1.addBox(0F, 0F, 0F, 1, 12, 1);
      GateRightPost1.setRotationPoint(-8F, 10F, -5F);
      GateRightPost1.setTextureSize(64, 32);
      GateRightPost1.mirror = true;
      setRotation(GateRightPost1, 0F, 0F, 0F);
      GateRightPost2 = new ModelRenderer(this, 176, 0);
      GateRightPost2.addBox(0F, 0F, 0F, 1, 12, 1);
      GateRightPost2.setRotationPoint(-8F, 10F, 1F);
      GateRightPost2.setTextureSize(64, 32);
      GateRightPost2.mirror = true;
      setRotation(GateRightPost2, 0F, 0F, 0F);
      GateRightPost3 = new ModelRenderer(this, 176, 0);
      GateRightPost3.addBox(0F, 0F, 0F, 1, 12, 1);
      GateRightPost3.setRotationPoint(-8F, 10F, -2F);
      GateRightPost3.setTextureSize(64, 32);
      GateRightPost3.mirror = true;
      setRotation(GateRightPost3, 0F, 0F, 0F);
      GateRightPost4 = new ModelRenderer(this, 176, 0);
      GateRightPost4.addBox(0F, 0F, 0F, 1, 12, 1);
      GateRightPost4.setRotationPoint(-8F, 10F, 4F);
      GateRightPost4.setTextureSize(64, 32);
      GateRightPost4.mirror = true;
      setRotation(GateRightPost4, 0F, 0F, 0F);
      
      convertToChild(this.GateBackTop, this.GateBackPost1);
      convertToChild(this.GateBackTop, this.GateBackPost2);
      convertToChild(this.GateBackTop, this.GateBackPost3);
      convertToChild(this.GateBackTop, this.GateBackPost4);
      convertToChild(this.GateBackTop, this.GateBackBot);
      
      convertToChild(this.GateFrontTop, this.GateFrontPost1);
      convertToChild(this.GateFrontTop, this.GateFrontPost2);
      convertToChild(this.GateFrontTop, this.GateFrontPost3);
      convertToChild(this.GateFrontTop, this.GateFrontPost4);
      convertToChild(this.GateFrontTop, this.GateFrontBot);
      
      convertToChild(this.GateLeftTop, this.GateLeftPost1);
      convertToChild(this.GateLeftTop, this.GateLeftPost2);
      convertToChild(this.GateLeftTop, this.GateLeftPost3);
      convertToChild(this.GateLeftTop, this.GateLeftPost4);
      convertToChild(this.GateLeftTop, this.GateLeftBot);
      
      convertToChild(this.GateRightTop, this.GateRightPost1);
      convertToChild(this.GateRightTop, this.GateRightPost2);
      convertToChild(this.GateRightTop, this.GateRightPost3);
      convertToChild(this.GateRightTop, this.GateRightPost4);
      convertToChild(this.GateRightTop, this.GateRightBot);
  }
  
  /**Converts the child's rotation points and rotation to be relative to the parent's rotation points and rotation. NOTE: the child must be removed from the render method, other wise double rendering occurs!*/
  public void convertToChild(ModelRenderer parent, ModelRenderer child) {
		 child.rotationPointX -= parent.rotationPointX;
	     child.rotationPointY -= parent.rotationPointY;
	     child.rotationPointZ -= parent.rotationPointZ;
	     child.rotateAngleX -= parent.rotateAngleX;
	     child.rotateAngleY -= parent.rotateAngleY;
	     child.rotateAngleZ -= parent.rotateAngleZ;
	     parent.addChild(child);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    CageBot.render(f5);
    CageTop.render(f5);
    CagePostFrontLeft.render(f5);
    CagePostFrontRight.render(f5);
    CagePostBackLeft.render(f5);
    CagePostBackRight.render(f5);
    GateFrontBot.render(f5);
    GateFrontTop.render(f5);
    GateFrontPost1.render(f5);
    GateFrontPost2.render(f5);
    GateFrontPost3.render(f5);
    GateFrontPost4.render(f5);
    GateBackBot.render(f5);
    GateBackTop.render(f5);
    GateBackPost1.render(f5);
    GateBackPost2.render(f5);
    GateBackPost3.render(f5);
    GateBackPost4.render(f5);
    GateLeftBot.render(f5);
    GateLeftTop.render(f5);
    GateLeftPost1.render(f5);
    GateLeftPost2.render(f5);
    GateLeftPost3.render(f5);
    GateLeftPost4.render(f5);
    GateRightBot.render(f5);
    GateRightTop.render(f5);
    GateRightPost1.render(f5);
    GateRightPost2.render(f5);
    GateRightPost3.render(f5);
    GateRightPost4.render(f5);
  }
  
  public void renderModel(float f) {
    CageBot.render(f);
    CageTop.render(f);
    CagePostFrontLeft.render(f);
    CagePostFrontRight.render(f);
    CagePostBackLeft.render(f);
    CagePostBackRight.render(f);
//    GateFrontBot.render(f);
    GateFrontTop.render(f);
//    GateFrontPost1.render(f);
//    GateFrontPost2.render(f);
//    GateFrontPost3.render(f);
//    GateFrontPost4.render(f);
//    GateBackBot.render(f);
    GateBackTop.render(f);
//    GateBackPost1.render(f);
//    GateBackPost2.render(f);
//    GateBackPost3.render(f);
//    GateBackPost4.render(f);
//    GateLeftBot.render(f);
    GateLeftTop.render(f);
//    GateLeftPost1.render(f);
//    GateLeftPost2.render(f);
//    GateLeftPost3.render(f);
//    GateLeftPost4.render(f);
//    GateRightBot.render(f);
    GateRightTop.render(f);
//    GateRightPost1.render(f);
//    GateRightPost2.render(f);
//    GateRightPost3.render(f);
//    GateRightPost4.render(f);
   
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z) {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity) {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}
